namespace aaz.libxl;
var _dll = ..aaz.libxl._dll;
var xlFilterColumnSetTop10 = _dll.api( "xlFilterColumnSetTop10", "void(ptr, double, int, int)" );

class filterColumn{ 
	ctor(handle){
		if(!handle) return ; 
		this.handle = handle;
	}
	
	filter = function(index){
		return ..raw.str(_dll.xlFilterColumnFilterP(this.handle, index), true); 
	}
	
	getTop10 = function(){
		var value = {double value};
		var top = {int value};
		var percent = {int value};
		
		return 
			_dll.xlFilterColumnGetTop10(this.handle,value, top, percent),
			value.value,
			top.value,
			percent.value; 
	}
	
	setTop10 = function(value, top, percent){
		_dll.xlFilterColumnSetTop10(this.handle, value, top, percent);
	}
	
	getCustomFilter = function(){
		var op1 = {double value};
		var v1 = {ustring value};
		var op2 = {int value};
		var v2 = {ustring value};
		var andOp = {int value};
		
		return 
			_dll.xlFilterColumnGetCustomFilter(this.handle, op1, v1, op2, v2, andOp),
			op1,
			v1,
			op2,
			v2,
			andOp; 
	}
	
	setCustomFilter = function(op, val){
		_dll.xlFilterColumnSetCustomFilter(this.handle, op, val);
	}
	
	setCustomFilterEx = function(op1, v1, op2, v2, andOp){
		_dll.xlFilterColumnSetCustomFilterEx(this.handle, op1, v1, op2, v2, andOp);
	}
	
	clear = function(){
		_dll.xlFilterColumnClear(this.handle);
	}
	
	@_metaProperty;	
}
namespace filterColumn{  
	_properties = {
		index = {
			_get = function(){
				return _dll.xlFilterColumnIndex(owner.handle); 
			}
		}
		
		filterType = {
			_get = function(){
				return _dll.xlFilterColumnFilterType(owner.handle); 
			}
		}
		
		filterSize = {
			_get = function(){
				return _dll.xlFilterColumnFilterSize(owner.handle); 
			}
		}
		
		addFilter = {
			_set = function(v){
				_dll.xlFilterColumnAddFilter(owner.handle, v);
			}
		}
	}
	
	_metaProperty = ..aaz.libxl.metaProperty(_properties);
}

