//book 书本
var _dll = aaz.libxl._dll;
var xlBookDateUnpack = _dll.api( "xlBookDateUnpack", "int(ptr, double, int&, int&, int&, int&, int&, int&, int&)" );

namespace aaz.libxl;
class book{   
	ctor(handle){
		if(!handle) return ; 
		this.handle = handle;
		
		..table.gc(this, "release");
	}
	
	release = function(){
		if(this.handle){
			_dll.xlBookRelease(this.handle);
			this.handle = null;
		}
	}
		
	setKey = function(name="GCCG", key="windows-282123090cc0e6036db16b60a1o3p0h9"){
		_dll.xlBookSetKey(this.handle, name, key);
	}
			
	load = function(filename){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoad(this.handle, filename);
	}
		
	save = function(filename){
		filename = ..io.fullpath(filename);
		return _dll.xlBookSave(this.handle, filename);
	}
	
	loadUsingTempFile = function(filename, tempFile){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoadUsingTempFile(this.handle, filename, tempFile); 
	}
	
	saveUsingTempFile = function(filename, useTempFile){
		filename = ..io.fullpath(filename);
		return _dll.xlBookSaveUsingTempFile(this.handle, filename, useTempFile); 
	}
	
	loadPartially = function(filename, sheetIndex, firstRow, lastRow){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoadPartially(this.handle, filename, sheetIndex, firstRow, lastRow); 
	}
	
	loadPartiallyUsingTempFile = function(filename, sheetIndex, firstRow, lastRow, tempFile){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoadPartiallyUsingTempFile(this.handle, filename, sheetIndex, firstRow, lastRow, tempFile ); 
	}
	
	loadWithoutEmptyCells = function(filename){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoadWithoutEmptyCells(this.handle, filename); 
	}
	
	loadInfo = function(filename){
		filename = ..io.fullpath(filename);
		return _dll.xlBookLoadInfo(this.handle, filename); 
	}
	
	loadRaw = function( data, size ){
		if(size === null){
			size = #data
		}
		
		return _dll.xlBookLoadRawA(this.handle, data, size); 
	}
	
	loadRawPartially = function(data, size, sheetIndex, firstRow, lastRow){
		if( size === null ){
			size = #data
		}
		
		return _dll.xlBookLoadRawPartially(this.handle, data, size, sheetIndex, firstRow, lastRow); 
	}
	
	saveRaw = function(){
		var data = {ptr value};
		var size = {INT value};
		
		return 
			_dll.xlBookSaveRaw( this.handle, data, size ),
			..raw.tostring(data.value),
			size.value; 
	}

	addSheet = function( name, initSheet=1 ){
		return ..aaz.libxl.sheet(_dll.xlBookAddSheetP(this.handle, name, initSheet-1));	
	}
	
	insertSheet = function(index, name, initSheet){
		return ..aaz.libxl.sheet(_dll.xlBookInsertSheetP(this.handle, index-1, name, initSheet));
	}
	
	getSheet = function(index){
		return ..aaz.libxl.sheet(_dll.xlBookGetSheetP(this.handle, index-1));
	}
	
	getSheetName = function(index){
		return ..raw.str(_dll.xlBookGetSheetNameP(this.handle, index-1), true);
	}
	
	sheetType = function(index){
		return _dll.xlBookSheetType(this.handle, index-1); 
	}
	
	moveSheet = function(srcIndex, dstIndex ){
		return _dll.xlBookMoveSheet(this.handle, srcIndex, dstIndex); 
	}
	
	delSheet = function(index){
		return _dll.xlBookDelSheet( this.handle, index-1 ); 
	}
	
	addFormat = function(initFormat=0 ){
		return ..aaz.libxl.format( _dll.xlBookAddFormatP(this.handle, initFormat) ); 
	}
	
	addFont = function( initFont=0 ){
		return ..aaz.libxl.font( _dll.xlBookAddFontP(this.handle, initFont) );
	}
	
	addRichString = function(){
		return ..aaz.libxl.richString( _dll.xlBookAddRichStringP(this.handle) );
	}
	
	addCustomNumFormat = function(customNumFormat){
		return _dll.xlBookAddCustomNumFormat( this.handle, customNumFormat ); 
	}
	
	customNumFormat = function(fmt){
		return ..raw.str( _dll.xlBookCustomNumFormatP(this.handle,fmt), true); 
	}
	
	format = function(index){
		return ..aaz.libxl.format(_dll.xlBookFormatP(this.handle,index-1)); 
	}
	
	font = function(index){
		return ..aaz.libxl.font(_dll.xlBookFontP(this.handle,index-1)); 
	}
	
	datePack = function(year, month, day, hour, min, sec, msec){
		return _dll.xlBookDatePackD(this.handle, year, month, day, hour, min, sec, msec); 
	}
	
	dateUnpack = function(value){
		return xlBookDateUnpack(this.handle, value, 0, 0, 0, 0, 0, 0, 0); 
	}
	
	colorPack = function(red, green, blue){
		return _dll.xlBookColorPack( this.handle, red, green, blue); 
	}
	
	colorUnpack = function(color){
		var red = {int value};
		var green = {int value};
		var blue = {int value};
		_dll.xlBookColorUnpack(this.handle, red, green, blue);
		
		return 
			red.value,
			green.value,
			blue.value;
	}
	
	getPicture = function(index){
		var data = {string value};
		var size = {INT value};
		
		return 
			_dll.xlBookGetPicture(this.handle, index-1, data, size ),
			data.value,
			size.value; 
	}
	
	addPicture = function(filename){
		filename = ..io.fullpath(filename);
		return _dll.xlBookAddPicture(this.handle, filename); 
	}
	
	addPicture2 = function(data){
		return _dll.xlBookAddPictureA(this.handle, data, #data); 
	}
	
	addPictureAsLink = function(filename, insert){
		filename = ..io.fullpath(filename);
		return _dll.xlBookAddPictureAsLink(this.handle, filename, insert); 
	}
	
	defaultFont = function(){
		var fontSize = {int value};
		
		return 
			..raw.str( _dll.xlBookDefaultFontP(this.handle, fontSize), true),
			fontSize.value;
	}
	
	setDefaultFont = function(fontName, fontSize){
		_dll.xlBookSetDefaultFont(this.handle, fontName, fontSize);
	}
	
	@_metaProperty;
}
namespace book{
    _properties = {  		
   		count = {
   			_get = function(){
   				return _dll.xlBookSheetCount(owner.handle); 
   			}
   		}
   		
   		formatSize = {
   			_get = function(){
   				return _dll.xlBookFormatSize(owner.handle);  
   			}
   		}
   		
   		fontSize = {
   			_get = function(){
   				return _dll.xlBookFontSize(owner.handle); 
   			}
   		}
		
		activeSheet = {
   			_get = function(){
   				return _dll.xlBookActiveSheet(owner.handle); 
   			}
   			
   			_set = function(v){
   				_dll.xlBookSetActiveSheet(owner.handle, v);
   			}
		}
		
		pictureSize = {
			_set = function(v){
				return _dll.xlBookPictureSize(owner.handle, v); 
			}
			
		}
		
		refR1C1 = {
			_get = function(){
				return _dll.xlBookRefR1C1(owner.handle); 
			}
			
			_set = function(v){
				_dll.xlBookSetRefR1C1(owner.handle, v);
			}
		}
		
		rgbMode = {
			_get = function(){
				return _dll.xlBookRgbMode(owner.handle); 
			}
			
			_set = function(v){
				_dll.xlBookSetRgbMode(owner.handle, v);
			}
		}
		
		calcMode = {
			_get = function(){
				return _dll.xlBookCalcMode(owner.handle);
			}
			
			_set = function(v){
				_dll.xlBookSetCalcMode(owner.handle, v);
			}
		}
		
   		version = {
   			_get = function(){
   				return _dll.xlBookVersion(owner.handle); 
   			}
   		}
   		
   		biffVersion = {
   			_get = function(){
   				return _dll.xlBookBiffVersion(owner.handle); 
   			}
   		}
   		
		isDate1904 = {
			_get = function(){
				return _dll.xlBookIsDate1904(owner.handle); 
			}
			
			_set = function(v){
				_dll.xlBookSetDate1904(owner.handle, v);
			}
		}
		
		isTemplate = {
			_get = function(){
				return _dll.xlBookIsTemplate(owner.handle); 
			}
			
			_set = function(v){
				_dll.xlBookSetTemplate(owner.handle, v);
			}
		}
		
		errorMessage = {
			_get = function(){
				return ..raw.str(_dll.xlBookErrorMessageP(owner.handle), true); 
			}
		}
    }
    
   _metaProperty = ..aaz.libxl.metaProperty(_properties);
}

